@page "/loadexcel"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@using OfficeOpenXml 
@using System.Security.Cryptography
@using PremFEPost.Data
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation 
@inject IJSRuntime JS
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]
<PageTitle> Upload Excel File   </PageTitle>
<div class="card">
    <div class="card-header bg-success text-white">
        Upload Premium Excel Files
    </div>
    <div class="card-body">
        <div class="form-control">
            <label>Choose file to upload</label>
            <br />
            <InputFile OnChange="OnInputFileChange1" />
        </div>
        <br />
        <button class="btn btn-dark" @onclick="UploadFile" >Submit for processing</button>
    </div>

    <div class="card-footer">
        <div id="popup" class="popup  bg-success" style="display:none;">
            <p class="bg-success">Process Completed!</p>
        </div>
    </div>
</div>
<br />

<div class="card-header bg-success text-white">
    Batch Details
</div>


<table class="table table-striped card-body ">
    <thead>
        <tr>
            <th>Batch ID</th>
            <th>File Name</th>
            <th>Date</th>
            <th>Uploaded By</th>
            <th>Authorised By</th>
            <th>Status</th>
            <th>Records</th>
            <th>Action</th>
            <!-- Add more headers as needed -->
        </tr>
    </thead>
    <tbody>
        @foreach (var batch in PaginatedBatchDetails)
        {
            <tr>
                <td>@batch.Id</td>
                <td>@batch.FileName</td>
                <td>@batch.Date</td>
                <td>@batch.UploadedBy</td>
                <td>@batch.AuthorisedBy</td>
                <td>@batch.Status</td>
                <td>@batch.Records</td>
                <td>
                    <a class="btn btn-info" asp-page="/BatchItems" asp-route-id="@batch.Id">View Items</a>
                </td>
                <!-- Add more data cells as needed -->
            </tr>
        }
    </tbody>
</table>

<div card-footer>
    <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
    <span>Page @CurrentPage of @TotalPages</span>
    <button @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
</div>


<script>
    function showPopup() {
        var popup = document.getElementById("popup");
        popup.style.display = "block"; // Show the popup

        // Fade out after 3 seconds
        setTimeout(function () {
            popup.style.opacity = "0"; // Start fading out
            setTimeout(function () {
                popup.style.display = "none"; // Hide after fade out
                popup.style.opacity = "1"; // Reset opacity for next show
            }, 1000); // Match this with the CSS transition duration
        }, 20000); // Show for 3 seconds
    }

    // Method to call from C#
    window.callPopup = function () {
        showPopup();
    }
</script>

@code {
    private IBrowserFile uploadedFile;
    private bool fileSelected = false;

    private List<BatchDetails> BatchDetailsList = new List<BatchDetails>();
    private List<BatchDetails> PaginatedBatchDetails = new List<BatchDetails>();
    private int CurrentPage = 1;
    private int PageSize = 10; // Number of items per page
    private int TotalItems;
    private int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);


    public static string GenerateUniqueReference()
    {
        // Prefix
        string prefix = "ZB";

        // Get current date and time
        DateTime now = DateTime.Now;
        string datePart = now.ToString("yyyyMMddHHmm"); // Format: YYYYMMDDHHMM

        // Generate the random part
        string randomPart = GenerateRandomString(20 - (prefix.Length + datePart.Length));

        // Combine all parts
        return $"{prefix}{datePart}{randomPart}";
    }

    private static string GenerateRandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        using (var rng = new RNGCryptoServiceProvider())
        {
            byte[] randomBytes = new byte[length];
            rng.GetBytes(randomBytes);
            char[] result = new char[length];

            for (int i = 0; i < length; i++)
            {
                result[i] = chars[randomBytes[i] % chars.Length];
            }

            return new string(result);
        }
    }

    private async Task OnInputFileChange1(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        fileSelected = uploadedFile != null;
        await InvokeAsync(StateHasChanged);
    }


    private async Task UploadFile()
    {
        if (uploadedFile == null)
            return;

        try
        {


            using (var stream = new MemoryStream())
            {
                await uploadedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 2000).CopyToAsync(stream);
                stream.Position = 0; // Reset the stream position
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                using (var package = new ExcelPackage(stream))
                {
                    var worksheet = package.Workbook.Worksheets[0];
                    var rowCount = worksheet.Dimension.Rows;

                    var bdetails = new BatchDetails
                    {
                        FileName = uploadedFile.Name,
                        Date = DateTime.Now.ToString("yyyyMMddHHmm"),
                        UploadedBy = "User1",
                        AuthorisedBy = "User2",
                        Status = "Pending",
                        Records = rowCount-1
                        };
                    DbContext.BatchDetails.Add(bdetails);
                    await DbContext.SaveChangesAsync();

                    for (int row = 2; row <= rowCount; row++)
                    {
                        var trand = new TranDetails
                            {
                                FileName = bdetails.FileName,
                                BatchID = bdetails.Id.ToString(),
                                TranType = worksheet.Cells[row, 1].Text,
                                Currency = worksheet.Cells[row, 2].Text,
                                Channel = worksheet.Cells[row,3].Text,
                                Amount = worksheet.Cells[row,4].Text,
                                Phone = worksheet.Cells[row,5].Text,
                                DestinationPhone = worksheet.Cells[row,6].Text,
                                Profile = worksheet.Cells[row,7].Text,
                                AccountNo = worksheet.Cells[row,8].Text,
                                DestinationAccount = worksheet.Cells[row,9].Text,
                                Reference = worksheet.Cells[row,10].Text,
                                DestinationName = worksheet.Cells[row, 11].Text,
                                Narration = worksheet.Cells[row, 12].Text,
                                BankSwift = worksheet.Cells[row, 13].Text,
                                BranchCode = worksheet.Cells[row, 14].Text,
                                BatchTracker = worksheet.Cells[row,15].Text,                              
                                Status = "Pending",
                                ResponseMessage = "Pending",
                                Transactionreference = GenerateUniqueReference(),
                                TranDate = DateTime.Now.ToString("yyyyMMddHHmm"),
                                ProductCode = "Default"
                            };

                        DbContext.TranDetails.Add(trand);
                    }

                    await DbContext.SaveChangesAsync();
                    await JS.InvokeVoidAsync("callPopup");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


        fileSelected = false; // Reset after processing
        uploadedFile = null;
        StateHasChanged(); // Refresh UI
    }

    protected override async Task OnInitializedAsync()
    {
        BatchDetailsList = await DbContext.BatchDetails.ToListAsync();
        TotalItems = BatchDetailsList.Count;
        UpdatePaginatedBatchDetails();
    }

    private void UpdatePaginatedBatchDetails()
    {
        PaginatedBatchDetails = BatchDetailsList
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            UpdatePaginatedBatchDetails();
        }
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            UpdatePaginatedBatchDetails();
        }
    }
    private void ViewBatchItems(int batchId)
    {
        Navigation.NavigateTo($"/batchitems/{batchId}");
    }




}